
@use "sass:map";
@use "sass:string";
@use "sass:list";

// Properties is a map from the property-name to an array of format: (from-value, to-value, [options]).
// It's optional to give the options. The options is a map from the options to their values.
// If the options are not given for a property, they default to the "global" ones given as parameters to the function.
@mixin transition($properties, $options: none, $instant-revert: false, $begin-on-start: false){
    --animate-on-start: #{$begin-on-start};

    $duration: _get-option($options, "duration", 1s);
    $easing: _get-option($options, "easing", ease);
    $delay: _get-option($options, "delay", 0s);
    $offset-delay: _get-option($options, "offset-delay", 200ms);

    $transitions: "";
    @each $property-name, $values in $properties{
        // Extract values from list
        $from: nth($values, 1);
        $to: nth($values, 2);
        $options: null;
        @if (length($values) == 3){
            $options: nth($values, 3);
        }

        // Get animation options
        $local-duration: $duration;
        $local-easing: $easing;
        $local-delay: $delay;
        $local-offset-delay: $offset-delay;
        @if ($options){
            $local-duration: _get-option($options, "duration", $local-duration);
            $local-easing: _get-option($options, "easing", $local-easing);
            $local-delay: _get-option($options, "delay", $local-delay);
            $local-offset-delay: _get-option($options, "offset-delay", $local-offset-delay);
        }

        // Apply the transition
        @include _transition($property-name, nth($values, 1), nth($values, 2));
        $transitions: _add-transition($transitions, $property-name, _get-properties-list($local-duration, $local-easing, $local-delay, $local-offset-delay));
    }

    @if ($instant-revert == true){
        transition: none;
        &[data-animation-show]{
            transition: #{string.slice($transitions, 3, -1)};
        }
    }
    @else{
        transition: #{string.slice($transitions, 3, -1)};
    }
}

@mixin transition-on-visible($properties, $options: none, $stay-shown: false){
    $start-on-visible-replay: negate-boolean($stay-shown);
    --animate-on-visible: true;
    --animate-on-visible-replay: #{$start-on-visible-replay};
    @include transition($properties, $options, $start-on-visible-replay);
}

@function negate-boolean($boolean){
    @if ($boolean == false){
        @return true;
    }
    @else{
        @return false;
    }
}

@function _get-properties-list($duration, $easing, $delay, $offset-delay){
    @return ($duration, $easing, calc($delay + $offset-delay*var(--animation-offset, 0)));
}

@mixin _transition($property-name, $hidden-value, $shown-value){
    #{$property-name}: $hidden-value;
    &[data-animation-show]{
        #{$property-name}: $shown-value;
    }
}

@function _add-transition($current-transitions, $property-to-animate, $animation-properties){
    $properties: "";
    @each $prop in $animation-properties{
        $properties: string.insert($properties, " #{$prop}", -1);
    }
    @return string.insert($current-transitions, ", #{$property-to-animate}#{$properties}", -1);
}

@function _get-option($map, $key, $default){
    @each $option, $value in $map{
        @if ($option == $key){
            @return $value;
        }
    }
    @return $default;
}

@media(prefers-reduced-motion){
    *{
        transition-duration: 0s !important;
    }
}
