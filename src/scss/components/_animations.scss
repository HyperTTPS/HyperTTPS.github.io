
@use "sass:map";
@use "sass:string";
@use "sass:list";

$_animations: (
    "fade": (
        opacity: (0, 1), // Hidden value first, then shown value
    ),
    "slide": (
        transform: (translateX(-100%), none),
    )
);

// Animations is a map from the animation-name to a map of the options.
// Animation-name e.g. being "fade" or "slide"
@mixin animation($animations, $global-duration: 1s, $global-easing: ease, $global-delay: 0s, $global-offset-delay: 200ms){
    $transitions: "";
    @each $anim, $options in $animations{
        // Get animation options
        $duration: _get-option($options, "duration", $global-duration);
        $easing: _get-option($options, "easing", $global-easing);
        $delay: _get-option($options, "delay", $global-delay);
        $offset-delay: _get-option($options, "offset-delay", $global-offset-delay);

        // Get animation and apply
        @each $known-anim, $properties in $_animations{
            @if ($anim == $known-anim){
                @each $prop, $values in $properties{
                    @include _transition($prop, nth($values, 1), nth($values, 2));
                    $transitions: _add-transition($transitions, $prop, ($duration, $easing, calc($delay + $offset-delay*var(--animation-offset, 0))));
                }
            }
        }
    }
    transition: #{string.slice($transitions, 3, -1)};
}

@mixin _transition($property-name, $hidden-value, $shown-value){
    #{$property-name}: $hidden-value;
    &[data-animation-show]{
        #{$property-name}: $shown-value;
    }
}

@function _add-transition($current-transitions, $property-to-animate, $animation-properties){
    $properties: "";
    @each $prop in $animation-properties{
        $properties: string.insert($properties, " #{$prop}", -1);
    }
    @return string.insert($current-transitions, ", #{$property-to-animate}#{$properties}", -1);
}

@function _get-option($map, $key, $default){
    @each $option, $value in $map{
        @if ($option == $key){
            @return $value;
        }
    }
    @return $default;
}

@media(prefers-reduced-motion){
    .animation{
        transition-duration: 0;
    }
}
